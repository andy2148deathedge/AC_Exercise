(1)運算思維 (computational thinking, CT)

拆解問題 (Decomposition) :

在A8當中電腦只是根據隨機函式盲目的猜，而這次則要根據正常人
在玩終極密碼的情境讓電腦有辦法根據線索來更有效率進行猜題
而且還有10次以內就需猜中之限制


規律辨識 (Pattern Recognition) :

原本電腦每次都猜1-100
這次要讓他根據提示的'太大了'，'太小了'，逐步將猜測範圍縮小
而且這個縮小範圍的效率必須是高到可以10次內就猜中
讓人聯想到最快的方法就是針對新的範圍直接剖半猜中間值，
如範圍 1-100 就直接猜50，但這樣能否在10次內就找到呢?
因為每次都剖半，也就是剖半n次要找到一個確定答案
倒過來想就是答案數1*2的n次方，而2**7 = 128 
就已經超越100這個數量了，也就是說剖半法最多最多做7次
一定可以找到答案


抽象化 (Abstraction) :

用範圍剖半法來解決
可以利用求兩點中間點的距離公式

若猜n提示為太大，
下次猜測值就改為
(前次下限 + 這次猜測值) / 2   

若猜n提示為太小，
下次猜測值就改為
(這次猜測值 + 前次上限) / 2


演算法 (Algorithm) :

設定猜測上限b，初始為100
設定猜測下限a，初始為1

剖半法
猜測值永遠為 (a + b) / 2  //且取整數

當電腦猜一數字n，若提示為太大則下回合的上限b變為n
當電腦猜一數字n，若提示為太小則下回合的下限a變為n



(2)虛擬碼 (Pseudocode) :

莊家給定隨機密碼之答案

設定下限、上限變數a, b //初始為1 - 100

宣告變數用來代表挑戰者每回合猜測值//第一回合為(100 + 1)/2取整

設定變數作為回合計數//初始為1

WHILE ( 猜測值 !== 答案 )

	
	每回合猜測值設為(a + b) / 2 取整  

	IF 太大
		印出現在第幾回合，挑戰者猜多少，莊家回答太大
		上限值 b 改為 猜測值

	ELIF 太小
		印出現在第幾回合，挑戰者猜多少，莊家回答太小
		上限值 a 改為 猜測值 
	
	ELSE (猜中之情況) 
		印出現在第幾回合，挑戰者猜多少，恭喜答對
		(且因 猜測值 === 答案後，與迴圈觸發條件不同，迴圈停止)

	每圈最後皆須讓回合計數變數加 1 

		




























